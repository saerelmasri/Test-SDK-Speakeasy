/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type GetPurchaseConsumptionRequest = {
    purchaseId: string;
};

/**
 * Successful Response
 */
export type GetPurchaseConsumptionResponseBody = {
    /**
     * Remaining balance of the package in bytes
     */
    dataUsageRemainingInBytes?: number | undefined;
    /**
     * Status of the connectivity, possible values are 'ACTIVE' or 'NOT_ACTIVE'
     */
    status?: string | undefined;
};

export type GetPurchaseConsumptionResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful Response
     */
    object?: GetPurchaseConsumptionResponseBody | undefined;
};

/** @internal */
export namespace GetPurchaseConsumptionRequest$ {
    export type Inbound = {
        purchaseId: string;
    };

    export const inboundSchema: z.ZodType<GetPurchaseConsumptionRequest, z.ZodTypeDef, Inbound> = z
        .object({
            purchaseId: z.string(),
        })
        .transform((v) => {
            return {
                purchaseId: v.purchaseId,
            };
        });

    export type Outbound = {
        purchaseId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPurchaseConsumptionRequest> =
        z
            .object({
                purchaseId: z.string(),
            })
            .transform((v) => {
                return {
                    purchaseId: v.purchaseId,
                };
            });
}

/** @internal */
export namespace GetPurchaseConsumptionResponseBody$ {
    export type Inbound = {
        dataUsageRemainingInBytes?: number | undefined;
        status?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetPurchaseConsumptionResponseBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            dataUsageRemainingInBytes: z.number().optional(),
            status: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.dataUsageRemainingInBytes === undefined
                    ? null
                    : { dataUsageRemainingInBytes: v.dataUsageRemainingInBytes }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });

    export type Outbound = {
        dataUsageRemainingInBytes?: number | undefined;
        status?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetPurchaseConsumptionResponseBody
    > = z
        .object({
            dataUsageRemainingInBytes: z.number().optional(),
            status: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.dataUsageRemainingInBytes === undefined
                    ? null
                    : { dataUsageRemainingInBytes: v.dataUsageRemainingInBytes }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}

/** @internal */
export namespace GetPurchaseConsumptionResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GetPurchaseConsumptionResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetPurchaseConsumptionResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetPurchaseConsumptionResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetPurchaseConsumptionResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPurchaseConsumptionResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                object: z.lazy(() => GetPurchaseConsumptionResponseBody$.outboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                    ...(v.object === undefined ? null : { object: v.object }),
                };
            });
}
