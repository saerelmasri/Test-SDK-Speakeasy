/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Destinations = {
    /**
     * Name of the destination
     */
    name?: string | undefined;
    /**
     * ISO representation of the destination
     */
    destination?: string | undefined;
    supportedCountries?: Array<string> | undefined;
};

/**
 * Successful Response
 */
export type ListDestinationsResponseBody = {
    destinations?: Array<Destinations> | undefined;
};

export type ListDestinationsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful Response
     */
    object?: ListDestinationsResponseBody | undefined;
};

/** @internal */
export namespace Destinations$ {
    export type Inbound = {
        name?: string | undefined;
        destination?: string | undefined;
        supportedCountries?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<Destinations, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            destination: z.string().optional(),
            supportedCountries: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.destination === undefined ? null : { destination: v.destination }),
                ...(v.supportedCountries === undefined
                    ? null
                    : { supportedCountries: v.supportedCountries }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        destination?: string | undefined;
        supportedCountries?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Destinations> = z
        .object({
            name: z.string().optional(),
            destination: z.string().optional(),
            supportedCountries: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.destination === undefined ? null : { destination: v.destination }),
                ...(v.supportedCountries === undefined
                    ? null
                    : { supportedCountries: v.supportedCountries }),
            };
        });
}

/** @internal */
export namespace ListDestinationsResponseBody$ {
    export type Inbound = {
        destinations?: Array<Destinations$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<ListDestinationsResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            destinations: z.array(z.lazy(() => Destinations$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.destinations === undefined ? null : { destinations: v.destinations }),
            };
        });

    export type Outbound = {
        destinations?: Array<Destinations$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListDestinationsResponseBody> = z
        .object({
            destinations: z.array(z.lazy(() => Destinations$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.destinations === undefined ? null : { destinations: v.destinations }),
            };
        });
}

/** @internal */
export namespace ListDestinationsResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: ListDestinationsResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ListDestinationsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => ListDestinationsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: ListDestinationsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListDestinationsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => ListDestinationsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
