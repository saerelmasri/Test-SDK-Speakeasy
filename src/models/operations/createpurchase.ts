/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../types";
import { z } from "zod";

export type CreatePurchaseRequestBody = {
    /**
     * ISO representation of the package's destination
     */
    destination: string;
    /**
     * Size of the package in GB. The available options are 1, 2, 3, 5, 8, 20GB
     */
    dataLimitInGB: number;
    /**
     * Start date of the package's validity in the format 'yyyy-MM-dd'. This date can be set to the current day or any day within the next 12 months.
     */
    startDate: RFCDate;
    /**
     * End date of the package's validity in the format 'yyyy-MM-dd'. End date can be maximum 60 days after Start date.
     */
    endDate: RFCDate;
    /**
     * Email address where the purchase confirmation email will be sent (including QR Code & activation steps)
     */
    email?: string | undefined;
    /**
     * Customize the network brand of the issued eSIM. This parameter is accessible to platforms with Diamond tier and requires an alphanumeric string of up to 15 characters
     */
    networkBrand?: string | undefined;
    /**
     * Epoch value representing the start time of the package's validity. This timestamp can be set to the current time or any time within the next 12 months.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    startTime?: number | undefined;
    /**
     * Epoch value representing the end time of the package's validity. End time can be maximum 60 days after Start time.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    endTime?: number | undefined;
};

export type Purchase = {
    /**
     * ID of the purchase
     */
    id?: string | undefined;
    /**
     * ID of the package
     */
    packageId?: string | undefined;
    /**
     * Start date of the package's validity in the format 'yyyy-MM-ddThh:mm:ssZZ'
     */
    startDate?: Date | undefined;
    /**
     * End date of the package's validity in the format 'yyyy-MM-ddThh:mm:ssZZ'
     */
    endDate?: Date | undefined;
    /**
     * Creation date of the purchase in the format 'yyyy-MM-ddThh:mm:ssZZ'
     */
    createdDate?: Date | undefined;
    /**
     * Epoch value representing the start time of the package's validity
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    startTime?: number | undefined;
    /**
     * Epoch value representing the end time of the package's validity
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    endTime?: number | undefined;
};

export type Profile = {
    /**
     * ID of the eSIM
     */
    iccid?: string | undefined;
    /**
     * QR Code of the eSIM as base64
     */
    activationCode?: string | undefined;
};

/**
 * Successful Response
 */
export type CreatePurchaseResponseBody = {
    purchase?: Purchase | undefined;
    profile?: Profile | undefined;
};

export type CreatePurchaseResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful Response
     */
    object?: CreatePurchaseResponseBody | undefined;
};

/** @internal */
export namespace CreatePurchaseRequestBody$ {
    export type Inbound = {
        destination: string;
        dataLimitInGB: number;
        startDate: string;
        endDate: string;
        email?: string | undefined;
        networkBrand?: string | undefined;
        startTime?: number | undefined;
        endTime?: number | undefined;
    };

    export const inboundSchema: z.ZodType<CreatePurchaseRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            destination: z.string(),
            dataLimitInGB: z.number(),
            startDate: z.string().transform((v) => new RFCDate(v)),
            endDate: z.string().transform((v) => new RFCDate(v)),
            email: z.string().optional(),
            networkBrand: z.string().optional(),
            startTime: z.number().optional(),
            endTime: z.number().optional(),
        })
        .transform((v) => {
            return {
                destination: v.destination,
                dataLimitInGB: v.dataLimitInGB,
                startDate: v.startDate,
                endDate: v.endDate,
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.networkBrand === undefined ? null : { networkBrand: v.networkBrand }),
                ...(v.startTime === undefined ? null : { startTime: v.startTime }),
                ...(v.endTime === undefined ? null : { endTime: v.endTime }),
            };
        });

    export type Outbound = {
        destination: string;
        dataLimitInGB: number;
        startDate: string;
        endDate: string;
        email?: string | undefined;
        networkBrand?: string | undefined;
        startTime?: number | undefined;
        endTime?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreatePurchaseRequestBody> = z
        .object({
            destination: z.string(),
            dataLimitInGB: z.number(),
            startDate: z.instanceof(RFCDate).transform((v) => v.toString()),
            endDate: z.instanceof(RFCDate).transform((v) => v.toString()),
            email: z.string().optional(),
            networkBrand: z.string().optional(),
            startTime: z.number().optional(),
            endTime: z.number().optional(),
        })
        .transform((v) => {
            return {
                destination: v.destination,
                dataLimitInGB: v.dataLimitInGB,
                startDate: v.startDate,
                endDate: v.endDate,
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.networkBrand === undefined ? null : { networkBrand: v.networkBrand }),
                ...(v.startTime === undefined ? null : { startTime: v.startTime }),
                ...(v.endTime === undefined ? null : { endTime: v.endTime }),
            };
        });
}

/** @internal */
export namespace Purchase$ {
    export type Inbound = {
        id?: string | undefined;
        packageId?: string | undefined;
        startDate?: string | undefined;
        endDate?: string | undefined;
        createdDate?: string | undefined;
        startTime?: number | undefined;
        endTime?: number | undefined;
    };

    export const inboundSchema: z.ZodType<Purchase, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            packageId: z.string().optional(),
            startDate: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            endDate: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            createdDate: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            startTime: z.number().optional(),
            endTime: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.packageId === undefined ? null : { packageId: v.packageId }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.createdDate === undefined ? null : { createdDate: v.createdDate }),
                ...(v.startTime === undefined ? null : { startTime: v.startTime }),
                ...(v.endTime === undefined ? null : { endTime: v.endTime }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        packageId?: string | undefined;
        startDate?: string | undefined;
        endDate?: string | undefined;
        createdDate?: string | undefined;
        startTime?: number | undefined;
        endTime?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Purchase> = z
        .object({
            id: z.string().optional(),
            packageId: z.string().optional(),
            startDate: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            endDate: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            createdDate: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            startTime: z.number().optional(),
            endTime: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.packageId === undefined ? null : { packageId: v.packageId }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.createdDate === undefined ? null : { createdDate: v.createdDate }),
                ...(v.startTime === undefined ? null : { startTime: v.startTime }),
                ...(v.endTime === undefined ? null : { endTime: v.endTime }),
            };
        });
}

/** @internal */
export namespace Profile$ {
    export type Inbound = {
        iccid?: string | undefined;
        activationCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Profile, z.ZodTypeDef, Inbound> = z
        .object({
            iccid: z.string().optional(),
            activationCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.iccid === undefined ? null : { iccid: v.iccid }),
                ...(v.activationCode === undefined ? null : { activationCode: v.activationCode }),
            };
        });

    export type Outbound = {
        iccid?: string | undefined;
        activationCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Profile> = z
        .object({
            iccid: z.string().optional(),
            activationCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.iccid === undefined ? null : { iccid: v.iccid }),
                ...(v.activationCode === undefined ? null : { activationCode: v.activationCode }),
            };
        });
}

/** @internal */
export namespace CreatePurchaseResponseBody$ {
    export type Inbound = {
        purchase?: Purchase$.Inbound | undefined;
        profile?: Profile$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CreatePurchaseResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            purchase: z.lazy(() => Purchase$.inboundSchema).optional(),
            profile: z.lazy(() => Profile$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.purchase === undefined ? null : { purchase: v.purchase }),
                ...(v.profile === undefined ? null : { profile: v.profile }),
            };
        });

    export type Outbound = {
        purchase?: Purchase$.Outbound | undefined;
        profile?: Profile$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreatePurchaseResponseBody> = z
        .object({
            purchase: z.lazy(() => Purchase$.outboundSchema).optional(),
            profile: z.lazy(() => Profile$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.purchase === undefined ? null : { purchase: v.purchase }),
                ...(v.profile === undefined ? null : { profile: v.profile }),
            };
        });
}

/** @internal */
export namespace CreatePurchaseResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: CreatePurchaseResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CreatePurchaseResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => CreatePurchaseResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: CreatePurchaseResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreatePurchaseResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => CreatePurchaseResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
