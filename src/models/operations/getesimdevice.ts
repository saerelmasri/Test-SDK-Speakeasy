/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type GetESIMDeviceRequest = {
    iccid: string;
};

export type Device = {
    /**
     * Name of the OEM
     */
    oem?: string | undefined;
    /**
     * Name of the Device
     */
    hardwareName?: string | undefined;
    /**
     * Model of the Device
     */
    hardwareModel?: string | undefined;
    /**
     * Serial Number of the eSIM
     */
    eid?: string | undefined;
};

/**
 * Successful Response
 */
export type GetESIMDeviceResponseBody = {
    device?: Device | undefined;
};

export type GetESIMDeviceResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful Response
     */
    object?: GetESIMDeviceResponseBody | undefined;
};

/** @internal */
export namespace GetESIMDeviceRequest$ {
    export type Inbound = {
        iccid: string;
    };

    export const inboundSchema: z.ZodType<GetESIMDeviceRequest, z.ZodTypeDef, Inbound> = z
        .object({
            iccid: z.string(),
        })
        .transform((v) => {
            return {
                iccid: v.iccid,
            };
        });

    export type Outbound = {
        iccid: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetESIMDeviceRequest> = z
        .object({
            iccid: z.string(),
        })
        .transform((v) => {
            return {
                iccid: v.iccid,
            };
        });
}

/** @internal */
export namespace Device$ {
    export type Inbound = {
        oem?: string | undefined;
        hardwareName?: string | undefined;
        hardwareModel?: string | undefined;
        eid?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Device, z.ZodTypeDef, Inbound> = z
        .object({
            oem: z.string().optional(),
            hardwareName: z.string().optional(),
            hardwareModel: z.string().optional(),
            eid: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.oem === undefined ? null : { oem: v.oem }),
                ...(v.hardwareName === undefined ? null : { hardwareName: v.hardwareName }),
                ...(v.hardwareModel === undefined ? null : { hardwareModel: v.hardwareModel }),
                ...(v.eid === undefined ? null : { eid: v.eid }),
            };
        });

    export type Outbound = {
        oem?: string | undefined;
        hardwareName?: string | undefined;
        hardwareModel?: string | undefined;
        eid?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Device> = z
        .object({
            oem: z.string().optional(),
            hardwareName: z.string().optional(),
            hardwareModel: z.string().optional(),
            eid: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.oem === undefined ? null : { oem: v.oem }),
                ...(v.hardwareName === undefined ? null : { hardwareName: v.hardwareName }),
                ...(v.hardwareModel === undefined ? null : { hardwareModel: v.hardwareModel }),
                ...(v.eid === undefined ? null : { eid: v.eid }),
            };
        });
}

/** @internal */
export namespace GetESIMDeviceResponseBody$ {
    export type Inbound = {
        device?: Device$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetESIMDeviceResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            device: z.lazy(() => Device$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.device === undefined ? null : { device: v.device }),
            };
        });

    export type Outbound = {
        device?: Device$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetESIMDeviceResponseBody> = z
        .object({
            device: z.lazy(() => Device$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.device === undefined ? null : { device: v.device }),
            };
        });
}

/** @internal */
export namespace GetESIMDeviceResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GetESIMDeviceResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetESIMDeviceResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetESIMDeviceResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetESIMDeviceResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetESIMDeviceResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetESIMDeviceResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
