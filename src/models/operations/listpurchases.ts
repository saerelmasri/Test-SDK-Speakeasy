/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../types";
import { z } from "zod";

export type ListPurchasesRequest = {
    iccid?: string | undefined;
    /**
     * Start date of the interval for filtering purchases in the format 'yyyy-MM-dd'
     */
    afterDate?: RFCDate | undefined;
    /**
     * End date of the interval for filtering purchases in the format 'yyyy-MM-dd'
     */
    beforeDate?: RFCDate | undefined;
    afterCursor?: string | undefined;
    limit?: number | undefined;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    after?: number | undefined;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    before?: number | undefined;
};

export type Package = {
    /**
     * ID of the package
     */
    id?: string | undefined;
    /**
     * Size of the package in Bytes
     */
    dataLimitInBytes?: number | undefined;
    /**
     * ISO representation of the package's destination
     */
    destination?: string | undefined;
    /**
     * Name of the package's destination
     */
    destinationName?: string | undefined;
    /**
     * Price of the package in cents
     */
    priceInCents?: number | undefined;
};

export type ListPurchasesEsim = {
    /**
     * ID of the eSIM
     */
    iccid?: string | undefined;
};

export type Purchases = {
    /**
     * ID of the purchase
     */
    id?: string | undefined;
    /**
     * Start date of the package's validity in the format 'yyyy-MM-ddThh:mm:ssZZ'
     */
    startDate?: Date | undefined;
    /**
     * End date of the package's validity in the format 'yyyy-MM-ddThh:mm:ssZZ'
     */
    endDate?: Date | undefined;
    /**
     * Creation date of the purchase in the format 'yyyy-MM-ddThh:mm:ssZZ'
     */
    createdDate?: Date | undefined;
    /**
     * Epoch value representing the start time of the package's validity
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    startTime?: number | undefined;
    /**
     * Epoch value representing the end time of the package's validity
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    endTime?: number | undefined;
    /**
     * Epoch value representing the date of creation of the purchase
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    createdAt?: number | undefined;
    package?: Package | undefined;
    esim?: ListPurchasesEsim | undefined;
    /**
     * The source indicates where the eSIM was purchased, which can be from the API, dashboard, or landing-page. For purchases made before September 8, 2023, the value will be displayed as 'Not available'.
     */
    source?: string | undefined;
};

/**
 * Successful Response
 */
export type ListPurchasesResponseBody = {
    purchases?: Array<Purchases> | undefined;
    /**
     * The cursor value representing the end of the current page of results. Use this cursor value as the "afterCursor" parameter in your next request to retrieve the subsequent page of results. It ensures that you continue fetching data from where you left off, facilitating smooth pagination.
     */
    afterCursor?: string | null | undefined;
};

export type ListPurchasesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful Response
     */
    object?: ListPurchasesResponseBody | undefined;
};

/** @internal */
export namespace ListPurchasesRequest$ {
    export type Inbound = {
        iccid?: string | undefined;
        afterDate?: string | undefined;
        beforeDate?: string | undefined;
        afterCursor?: string | undefined;
        limit?: number | undefined;
        after?: number | undefined;
        before?: number | undefined;
    };

    export const inboundSchema: z.ZodType<ListPurchasesRequest, z.ZodTypeDef, Inbound> = z
        .object({
            iccid: z.string().optional(),
            afterDate: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            beforeDate: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            afterCursor: z.string().optional(),
            limit: z.number().optional(),
            after: z.number().optional(),
            before: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.iccid === undefined ? null : { iccid: v.iccid }),
                ...(v.afterDate === undefined ? null : { afterDate: v.afterDate }),
                ...(v.beforeDate === undefined ? null : { beforeDate: v.beforeDate }),
                ...(v.afterCursor === undefined ? null : { afterCursor: v.afterCursor }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.after === undefined ? null : { after: v.after }),
                ...(v.before === undefined ? null : { before: v.before }),
            };
        });

    export type Outbound = {
        iccid?: string | undefined;
        afterDate?: string | undefined;
        beforeDate?: string | undefined;
        afterCursor?: string | undefined;
        limit?: number | undefined;
        after?: number | undefined;
        before?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPurchasesRequest> = z
        .object({
            iccid: z.string().optional(),
            afterDate: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            beforeDate: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            afterCursor: z.string().optional(),
            limit: z.number().optional(),
            after: z.number().optional(),
            before: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.iccid === undefined ? null : { iccid: v.iccid }),
                ...(v.afterDate === undefined ? null : { afterDate: v.afterDate }),
                ...(v.beforeDate === undefined ? null : { beforeDate: v.beforeDate }),
                ...(v.afterCursor === undefined ? null : { afterCursor: v.afterCursor }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.after === undefined ? null : { after: v.after }),
                ...(v.before === undefined ? null : { before: v.before }),
            };
        });
}

/** @internal */
export namespace Package$ {
    export type Inbound = {
        id?: string | undefined;
        dataLimitInBytes?: number | undefined;
        destination?: string | undefined;
        destinationName?: string | undefined;
        priceInCents?: number | undefined;
    };

    export const inboundSchema: z.ZodType<Package, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            dataLimitInBytes: z.number().optional(),
            destination: z.string().optional(),
            destinationName: z.string().optional(),
            priceInCents: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.dataLimitInBytes === undefined
                    ? null
                    : { dataLimitInBytes: v.dataLimitInBytes }),
                ...(v.destination === undefined ? null : { destination: v.destination }),
                ...(v.destinationName === undefined
                    ? null
                    : { destinationName: v.destinationName }),
                ...(v.priceInCents === undefined ? null : { priceInCents: v.priceInCents }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        dataLimitInBytes?: number | undefined;
        destination?: string | undefined;
        destinationName?: string | undefined;
        priceInCents?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Package> = z
        .object({
            id: z.string().optional(),
            dataLimitInBytes: z.number().optional(),
            destination: z.string().optional(),
            destinationName: z.string().optional(),
            priceInCents: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.dataLimitInBytes === undefined
                    ? null
                    : { dataLimitInBytes: v.dataLimitInBytes }),
                ...(v.destination === undefined ? null : { destination: v.destination }),
                ...(v.destinationName === undefined
                    ? null
                    : { destinationName: v.destinationName }),
                ...(v.priceInCents === undefined ? null : { priceInCents: v.priceInCents }),
            };
        });
}

/** @internal */
export namespace ListPurchasesEsim$ {
    export type Inbound = {
        iccid?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ListPurchasesEsim, z.ZodTypeDef, Inbound> = z
        .object({
            iccid: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.iccid === undefined ? null : { iccid: v.iccid }),
            };
        });

    export type Outbound = {
        iccid?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPurchasesEsim> = z
        .object({
            iccid: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.iccid === undefined ? null : { iccid: v.iccid }),
            };
        });
}

/** @internal */
export namespace Purchases$ {
    export type Inbound = {
        id?: string | undefined;
        startDate?: string | undefined;
        endDate?: string | undefined;
        createdDate?: string | undefined;
        startTime?: number | undefined;
        endTime?: number | undefined;
        createdAt?: number | undefined;
        package?: Package$.Inbound | undefined;
        esim?: ListPurchasesEsim$.Inbound | undefined;
        source?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Purchases, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            startDate: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            endDate: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            createdDate: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            startTime: z.number().optional(),
            endTime: z.number().optional(),
            createdAt: z.number().optional(),
            package: z.lazy(() => Package$.inboundSchema).optional(),
            esim: z.lazy(() => ListPurchasesEsim$.inboundSchema).optional(),
            source: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.createdDate === undefined ? null : { createdDate: v.createdDate }),
                ...(v.startTime === undefined ? null : { startTime: v.startTime }),
                ...(v.endTime === undefined ? null : { endTime: v.endTime }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.package === undefined ? null : { package: v.package }),
                ...(v.esim === undefined ? null : { esim: v.esim }),
                ...(v.source === undefined ? null : { source: v.source }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        startDate?: string | undefined;
        endDate?: string | undefined;
        createdDate?: string | undefined;
        startTime?: number | undefined;
        endTime?: number | undefined;
        createdAt?: number | undefined;
        package?: Package$.Outbound | undefined;
        esim?: ListPurchasesEsim$.Outbound | undefined;
        source?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Purchases> = z
        .object({
            id: z.string().optional(),
            startDate: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            endDate: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            createdDate: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            startTime: z.number().optional(),
            endTime: z.number().optional(),
            createdAt: z.number().optional(),
            package: z.lazy(() => Package$.outboundSchema).optional(),
            esim: z.lazy(() => ListPurchasesEsim$.outboundSchema).optional(),
            source: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.createdDate === undefined ? null : { createdDate: v.createdDate }),
                ...(v.startTime === undefined ? null : { startTime: v.startTime }),
                ...(v.endTime === undefined ? null : { endTime: v.endTime }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.package === undefined ? null : { package: v.package }),
                ...(v.esim === undefined ? null : { esim: v.esim }),
                ...(v.source === undefined ? null : { source: v.source }),
            };
        });
}

/** @internal */
export namespace ListPurchasesResponseBody$ {
    export type Inbound = {
        purchases?: Array<Purchases$.Inbound> | undefined;
        afterCursor?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<ListPurchasesResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            purchases: z.array(z.lazy(() => Purchases$.inboundSchema)).optional(),
            afterCursor: z.string().nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.purchases === undefined ? null : { purchases: v.purchases }),
                ...(v.afterCursor === undefined ? null : { afterCursor: v.afterCursor }),
            };
        });

    export type Outbound = {
        purchases?: Array<Purchases$.Outbound> | undefined;
        afterCursor?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPurchasesResponseBody> = z
        .object({
            purchases: z.array(z.lazy(() => Purchases$.outboundSchema)).optional(),
            afterCursor: z.string().nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.purchases === undefined ? null : { purchases: v.purchases }),
                ...(v.afterCursor === undefined ? null : { afterCursor: v.afterCursor }),
            };
        });
}

/** @internal */
export namespace ListPurchasesResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: ListPurchasesResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ListPurchasesResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => ListPurchasesResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: ListPurchasesResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPurchasesResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => ListPurchasesResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
